<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
      <!-- 配置属性文件  -->
      <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
      <!-- 配置数据源 -->
      <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
          <property name="driverClassName" value="${jdbc.driver}"></property>
          <property name="url" value="${jdbc.url}"></property>
          <property name="username" value="${jdbc.username}"></property>
          <property name="password" value="${jdbc.password}"></property>
      </bean>
      <!-- 配置MyBatis工厂  -->
      <bean  id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <!-- 配置数据源    -->
          <property name="dataSource" ref="dataSource"></property>
          <!-- 配置mybatis的核心配置文件   -->
          <property name="configLocation" value="classpath:SqlMapConfig.xml"></property>
      </bean>

    <!--
         MapperScannerConfigurer作用：
         循环basePackage所表示的包，把包中的每个接口都找到，调用SqlSession.getMapper(XXXDao.class)
         把每个dao接口都创建出对应的dao代理对象，将dao代理对象放在容器中
         就不需要我们去为每个映射接口去声明一个bean了, 大大缩减了开发的效率
         对于StudentDao接口，其代理对象为 studentDao
    -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
          <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
          <property name="basePackage" value="com.fancy.dao"></property>
      </bean>
</beans>